
#Область ПрограммныйИнтерфейс

Функция ПолучитьДанныеИзPostgreSQL(НастройкиПодключения, ТекстЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	Результат = Новый Структура("УспешноВыполнен, ТаблицаДанных, ТекстОшибки", Истина, Неопределено, "");
	// проверка настроек подключения
	РезультатПроверки = ПроверитьКорректностьЗаполненияНастроек(НастройкиПодключения);
	Если Не РезультатПроверки.ЗаполненыКорректно Тогда
		Результат.ТекстОшибки = ОбработкаОшибкиВыполнения(НастройкиПодключения, "Некорректные настройки", РезультатПроверки.ТекстОшибки, НастройкиПодключения);
		Результат.УспешноВыполнен = Ложь;
	
	ИначеЕсли Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Результат.ТекстОшибки = ОбработкаОшибкиВыполнения(НастройкиПодключения, "Отсутствует запрос", "Текст запроса не указан", ТекстЗапроса);
		Результат.УспешноВыполнен = Ложь;
	
	Иначе
		Попытка
			// готовим контекст - если далее что-то будем менять - сможем использовать это при логировании и описании ошибки
			КонтекстВыполнения = Новый Структура;
			КонтекстВыполнения.Вставить("ТекстЗапроса", ТекстЗапроса);
			КонтекстВыполнения.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
			КонтекстВыполнения.Вставить("ОбъектПодключения", Неопределено);
			КонтекстВыполнения.Вставить("Типизировать", НастройкиПодключения.Типизировать);
			
			// получим подключение
			ТекущееСобытие = "Инициализация подключения";
			ОбъектПодключения = ПолучитьПодключение(НастройкиПодключения);
			КонтекстВыполнения.Вставить("ОбъектПодключения", ОбъектПодключения);
			
			// получим данные
			ТекущееСобытие = "Получение данных";
			Результат.ТаблицаДанных = ПолучитьТаблицуДанныхРезультатаЗапроса(НастройкиПодключения, КонтекстВыполнения);
		
		Исключение
			Результат.ТекстОшибки = ОбработкаОшибкиВыполнения(НастройкиПодключения, ТекущееСобытие, ОписаниеОшибки(), КонтекстВыполнения);
			Результат.УспешноВыполнен = Ложь;
		КонецПопытки;
	КонецЕсли;
	//
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСтруктуруНастроекПодключения() Экспорт
	Результат = Новый Структура;
	// данные подключения
	Результат.Вставить("ТипПодключения", ТипПодключения().ODBC);
	Результат.Вставить("АдресСервера", "localhost");
	Результат.Вставить("ПортСервера", "5432");
	Результат.Вставить("ИмяБазыДанных", "");
	Результат.Вставить("ИмяПользователя", "");
	Результат.Вставить("ПарольПользователя", "");
	// обработка данных
	Результат.Вставить("Типизировать", Ложь);
	Результат.Вставить("ТипизироватьXMLJSONКакСтроку", Истина);
	// логирование и обработка ошибок
	Результат.Вставить("ДелатьЗаписьОшибокВЖурналРегистрации", Истина);
	Результат.Вставить("ОбрабатыватьИсключения", Ложь);
	Результат.Вставить("АлгоритмЛогирования", "");
	Возврат Результат;
КонецФункции

Функция ТипПодключения() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ODBC", "ODBC");
	Результат.Вставить("HTTP", "HTTP");
	Возврат Результат;
КонецФункции

Функция ПолучитьПодключение(НастройкиПодключения) Экспорт
	Если НастройкиПодключения.Свойство("ОбъектПодключения") И НастройкиПодключения.ОбъектПодключения <> Неопределено Тогда
		Результат = НастройкиПодключения.ОбъектПодключения;
	//ИначеЕсли НастройкиПодключения.ТипПодключения = ТипПодключения().HTTP Тогда
	//	Результат = Новый HTTPСоединение(НастройкиПодключения.АдресСервера, НастройкиПодключения.ПортСервера, НастройкиПодключения.ИмяПользователя, НастройкиПодключения.ПарольПользователя);
	ИначеЕсли НастройкиПодключения.ТипПодключения = ТипПодключения().ODBC Тогда
		Результат = Новый COMОбъект("ADODB.CONNECTION");
		Результат.Provider	= "MSDASQL.1";
		Результат.ConnectionString = ПолучитьСтрокуПодключенияODBC(НастройкиПодключения);
	Иначе
		ВызватьИсключение "Не удалось инициализировать подключение - не указан тип подключения, либо указанный тип не поддерживается";
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазделСобытийЖурналаРегистрации()
	Возврат "PostgreConnector"; 
КонецФункции

Функция ПроверитьКорректностьЗаполненияНастроек(НастройкиПодключения)
	Результат = Новый Структура("ЗаполненыКорректно, ТекстОшибки", Истина, "");
	// Тип подключения
	Если Не ТипПодключения().Свойство(НастройкиПодключения.ТипПодключения) Тогда
		Результат.ЗаполненыКорректно = Ложь;
		Результат.ТекстОшибки = Результат.ТекстОшибки + Символы.ПС + "- указан некорректный тип подключения (""" + НастройкиПодключения.ТипПодключения + """)";
	КонецЕсли;
	// Адрес сервера
	Если Не ЗначениеЗаполнено(НастройкиПодключения.АдресСервера) Тогда
		Результат.ЗаполненыКорректно = Ложь;
		Результат.ТекстОшибки = Результат.ТекстОшибки + Символы.ПС + "- не указан адрес сервера";
	КонецЕсли;
	// Порт сервера
	Если Не ЗначениеЗаполнено(НастройкиПодключения.ПортСервера) Тогда
		Результат.ЗаполненыКорректно = Ложь;
		Результат.ТекстОшибки = Результат.ТекстОшибки + Символы.ПС + "- не указан порт сервера";
	КонецЕсли;
	// Имя базы данных
	Если Не ЗначениеЗаполнено(НастройкиПодключения.ИмяБазыДанных) Тогда
		Результат.ЗаполненыКорректно = Ложь;
		Результат.ТекстОшибки = Результат.ТекстОшибки + Символы.ПС + "- не указано имя базы данных";
	КонецЕсли;
	//
	Возврат Результат;
КонецФункции

Функция ПолучитьСтрокуПодключенияODBC(НастройкиПодключения)
	Результат = "";
	//
	Результат = "DRIVER={PostgreSQL Unicode(x64)};DATABASE=%ИмяБазы%;SERVER=%АдресСервера%;PORT=%ПортСервера%;SSLmode=disable;STMT=utf8;";
	Результат = СтрЗаменить(Результат, "%АдресСервера%", НастройкиПодключения.АдресСервера);
	Результат = СтрЗаменить(Результат, "%ПортСервера%", НастройкиПодключения.ПортСервера);
	Результат = СтрЗаменить(Результат, "%ИмяБазы%", НастройкиПодключения.ИмяБазыДанных);
	Если ЗначениеЗаполнено(НастройкиПодключения.ИмяПользователя) Тогда
		Результат = Результат + "UID=" + НастройкиПодключения.ИмяПользователя + ";";
		Если ЗначениеЗаполнено(НастройкиПодключения.ПарольПользователя) Тогда
			Результат = Результат + "Pwd=" + НастройкиПодключения.ПарольПользователя + ";";
		КонецЕсли;
	КонецЕсли;
	//
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеСтрокой(Данные, Префикс = " - ")
	Результат = "";
	//
	Если ТипЗнч(Данные) = Тип("Структура") ИЛИ ТипЗнч(Данные) = Тип("Соответствие") Тогда
		Для Каждого ЭлементДанных Из Данные Цикл
			// доп. обработка на случай пароля
			СтрокаПаролей = НРег("Пароль, ПарольПользователь, Parole, Pass, Password, Pwd");
			Если СтрНайти(СтрокаПаролей, ЭлементДанных.Ключ) > 0 Тогда
				Результат = Результат + Символы.ПС + Префикс + ЭлементДанных.Ключ + ": ***";
			Иначе
				Результат = Результат + Символы.ПС + Префикс + ЭлементДанных.Ключ + ": " + ПолучитьДанныеСтрокой(ЭлементДанных.Значение, Префикс + "- ");
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		Для ИндексДанных = 0 По Данные.Количество() - 1 Цикл
			ЭлементДанных = Данные.Получить(ИндексДанных);
			Результат = Результат + Символы.ПС + Префикс + Формат(ИндексДанных, "ЧГ=;ЧН=0") + ": " + ПолучитьДанныеСтрокой(ЭлементДанных, Префикс + "- ");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		Для Каждого КолонкаТаблицы Из Данные.Колонки Цикл
			Результат = Результат + ?(ЗначениеЗаполнено(Результат), ", ", "") + КолонкаТаблицы.Имя;
		КонецЦикла;
		Результат = "Таблица (" + Результат + "); количество строк: " + Формат(Данные.Количество(), "ЧГ=;ЧН=0"); 
	Иначе
		Попытка
			Результат = Строка(Данные);
		Исключение
			// не обрабатываем ошибку - не критично, но и данные не возвращаем - всегда возвращаем строку
		КонецПопытки;
	КонецЕсли;
	//
	Возврат Результат;
КонецФункции

Функция ОбработкаОшибкиВыполнения(НастройкиПодключения, Событие, ОписаниеОшибки, ДанныеОшибки = Неопределено)
	// подготовка параметров выполнения
	ДелатьЗаписьОшибокВЖурналРегистрации = Ложь;
	Если НастройкиПодключения.Свойство("ДелатьЗаписьОшибокВЖурналРегистрации") Тогда
		ДелатьЗаписьОшибокВЖурналРегистрации = НастройкиПодключения.ДелатьЗаписьОшибокВЖурналРегистрации;
	КонецЕсли;
	ОбрабатыватьИсключения = Ложь;
	Если НастройкиПодключения.Свойство("ОбрабатыватьИсключения") Тогда
		ОбрабатыватьИсключения = НастройкиПодключения.ОбрабатыватьИсключения;
	КонецЕсли;
	АлгоритмЛогирования = Неопределено;
	Если НастройкиПодключения.Свойство("АлгоритмЛогирования") Тогда
		АлгоритмЛогирования = НастройкиПодключения.АлгоритмЛогирования;
	КонецЕсли;
	// делаем запись в журнал регистрации
	Если ДелатьЗаписьОшибокВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(РазделСобытийЖурналаРегистрации() + "." + Событие, УровеньЖурналаРегистрации.Ошибка, , ПолучитьДанныеСтрокой(ДанныеОшибки), ОписаниеОшибки);
	КонецЕсли;
	// делаем запись в лог
	Если ЗначениеЗаполнено(АлгоритмЛогирования) Тогда
		// в данном случае не обрабатываем ошибку - алгоритм должен быть корректным
		Выполнить(АлгоритмЛогирования);
	КонецЕсли;
	// выкидываем ошибку по необходимости
	Результат = Событие + Символы.ПС + ОписаниеОшибки + ?(ЗначениеЗаполнено(ДанныеОшибки), Символы.ПС + "Контекст:" + ПолучитьДанныеСтрокой(ДанныеОшибки), "");
	Если Не ОбрабатыватьИсключения Тогда
		ВызватьИсключение Результат;
	КонецЕсли;
	// если еще не вылетели - вернем текст ошибки
	Возврат Результат;
КонецФункции

Функция ПолучитьТаблицуДанныхРезультатаЗапроса(НастройкиПодключения, КонтекстВыполнения)
	Результат = Неопределено;
	//
	Если НастройкиПодключения.ТипПодключения = ТипПодключения().ODBC Тогда
		Результат = ПолучитьТаблицуДанныхРезультатаЗапросаODBC(НастройкиПодключения, КонтекстВыполнения);
	Иначе
		ВызватьИсключение "Не реализован тип подключения " + НастройкиПодключения.ТипПодключения;
	КонецЕсли;
	//
	Возврат Результат;
КонецФункции

Функция ПолучитьТаблицуДанныхРезультатаЗапросаODBC(НастройкиПодключения, КонтекстВыполнения)
	// запомним состояние подключения и при необходимости откроем 
	ЗакрытьПодключение = Ложь;
  Если КонтекстВыполнения.ОбъектПодключения.State = 0 Тогда
		КонтекстВыполнения.ОбъектПодключения.open();
		ЗакрытьПодключение = Истина;
	КонецЕсли;
	
	// готовим объекты ADO
	КонтекстВыполнения.Вставить("НаборЗаписей", Новый ComObject("ADODB.RecordSet"));
	КонтекстВыполнения.Вставить("Команда", Новый COMОбъект("ADODB.Command"));
  КонтекстВыполнения.Команда.ActiveConnection = КонтекстВыполнения.ОбъектПодключения;    
	КонтекстВыполнения.Команда.CommandText = КонтекстВыполнения.ТекстЗапроса;
	
	// установка параметров при их наличии
	Если КонтекстВыполнения.Свойство("ПараметрыЗапроса")
		И (ТипЗнч(КонтекстВыполнения.ПараметрыЗапроса) = Тип("Структура") ИЛИ ТипЗнч(КонтекстВыполнения.ПараметрыЗапроса) = Тип("Соответствие"))
		И КонтекстВыполнения.ПараметрыЗапроса.Количество() > 0 Тогда
		// получим таблицу параметров, упорядоченную по "встрече" параметра в тексте запроса
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметров.Колонки.Добавить("ПозицияВТекстеЗапроса", Новый ОписаниеТипов("Число"));
		Для Каждого ЭлементПараметра Из КонтекстВыполнения.ПараметрыЗапроса Цикл
			ПозицияВТекстеЗапроса = СтрНайти(КонтекстВыполнения.ТекстЗапроса, "&" + ЭлементПараметра.Ключ);
			Если ПозицияВТекстеЗапроса > 0 Тогда
				НоваяСтрокаПараметра = ТаблицаПараметров.Добавить();
				НоваяСтрокаПараметра.ИмяПараметра = ЭлементПараметра.Ключ;
				НоваяСтрокаПараметра.ПозицияВТекстеЗапроса = ПозицияВТекстеЗапроса;
			КонецЕсли;
		КонецЦикла;
		ТаблицаПараметров.Сортировать("ПозицияВТекстеЗапроса Возр");
		// изменим текст запроса, добавим параметры для команды и заполним порядок параметров для контекста
		КонтекстВыполнения.Вставить("ПорядокПараметров", ТаблицаПараметров.ВыгрузитьКолонку("ИмяПараметра"));
		Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
			КонтекстВыполнения.ТекстЗапроса = СтрЗаменить(КонтекстВыполнения.ТекстЗапроса, "&" + СтрокаПараметра.ИмяПараметра, "?");
			ЗначениеПараметра = КонтекстВыполнения.ПараметрыЗапроса[СтрокаПараметра.ИмяПараметра];
			Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
				ПараметрКоманды = КонтекстВыполнения.Команда.CreateParameter(СтрокаПараметра.ИмяПараметра, ПолучитьТипПараметраADO(ЗначениеПараметра), 1, СтрДлина(ЗначениеПараметра), ЗначениеПараметра);
			Иначе
				ПараметрКоманды = КонтекстВыполнения.Команда.CreateParameter(СтрокаПараметра.ИмяПараметра, ПолучитьТипПараметраADO(ЗначениеПараметра), 1, , ЗначениеПараметра);
			КонецЕсли;
	    КонтекстВыполнения.Команда.Parameters.Append(ПараметрКоманды);
		КонецЦикла;
		КонтекстВыполнения.Команда.CommandText = КонтекстВыполнения.ТекстЗапроса;
	КонецЕсли;

	// непосредственно получение набора записей запросом к БД
	КонтекстВыполнения.НаборЗаписей = КонтекстВыполнения.Команда.Execute();
	
	// подготовка результата
	КонтекстВыполнения.Вставить("ВременнаяТаблица", Новый ТаблицаЗначений);
	
	// определяем служебные таблицы типов при необходимости типизировать результаты
	// ! TODO: на текущий момент из БД запросом получаем колонки всех таблиц БД, чтобы не утруждать себя парсингом текста запроса (чтобы получить имена используемых таблиц)
	СоответствиеТипов = Новый Соответствие;	// имя колонки - функция обработки значения для приведения типа, если не типизируем - пустое
	Если КонтекстВыполнения.Свойство("Типизировать") И КонтекстВыполнения.Типизировать = Истина Тогда
		НастройкиПодключения.Вставить("ТаблицаТиповБД", ПолучитьТаблицуТиповКолонокБД(НастройкиПодключения, КонтекстВыполнения.ОбъектПодключения));
		НастройкиПодключения.Вставить("ТаблицаСоответствияТипов", ПолучитьТаблицуКодовТипов());
	КонецЕсли;
	
	//Добавление колонок в таблицу результата
	Для НомерСтолбца = 0 По КонтекстВыполнения.НаборЗаписей.Fields.Count - 1 Цикл
		ЭлементКолонкиADO = КонтекстВыполнения.НаборЗаписей.Fields.Item(НомерСтолбца);                 
		ИмяСтолбца = ЭлементКолонкиADO.Name;
		ОписаниеТипа = Неопределено;
		
		// при необходимости типизировать - определим ОписаниеТипа колонки результата и функцию обработки
		Если КонтекстВыполнения.Свойство("Типизировать") И КонтекстВыполнения.Типизировать = Истина Тогда
			// находим строки описания типов (по имени колонки БД и типу поля набора записей ADO)
			СтрокаОписанияТипаБД = НастройкиПодключения.ТаблицаТиповБД.Найти(ЭлементКолонкиADO.Name, "column_name");
			СтрокаСоответствияТипов = НастройкиПодключения.ТаблицаСоответствияТипов.Найти(ЭлементКолонкиADO.Type, "КодТипа");
			// если нашли тип БД
			Если СтрокаОписанияТипаБД <> Неопределено Тогда
				// установим тип 1С из соответствия типов БД
				ОписаниеТипа = СтрокаОписанияТипаБД.Тип1С;
				
				// теперь если нашли соответствие по типу поля набора записей ADO и тип 1С для него не совпадает с типом 1С по соответствию типа в БД 
				Если СтрокаСоответствияТипов = Неопределено ИЛИ СтрокаОписанияТипаБД.udt_name <> СтрокаСоответствияТипов.ИмяТипаPostgre Тогда
					// найдем строку соответствия типов по имени типа БД
					СтрокаСоответствияТипов = НастройкиПодключения.ТаблицаСоответствияТипов.Найти(СтрокаОписанияТипаБД.udt_name, "ИмяТипаPostgre");
				КонецЕсли;
				
				// если нашли строку соответствия типа ADO - запомним функцию обработки
				Если СтрокаСоответствияТипов <> Неопределено Тогда
					СоответствиеТипов.Вставить(ИмяСтолбца, СтрокаСоответствияТипов.ФункцияОбработки);
					Если Не НастройкиПодключения.ТипизироватьXMLJSONКакСтроку
						ИЛИ (СтрокаСоответствияТипов.ФункцияОбработки <> "ОбработкаЗначенийБД_ПолучитьXML" И СтрокаСоответствияТипов.ФункцияОбработки <> "ОбработкаЗначенийБД_ПолучитьJSON")
						Тогда
						ОписаниеТипа = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// если не установили описание типов, но нашли соответствие по типу ADO - используем его
			Если ОписаниеТипа = Неопределено И СтрокаСоответствияТипов <> Неопределено Тогда
				ОписаниеТипа = СтрокаСоответствияТипов.Тип1С;
				СоответствиеТипов.Вставить(ИмяСтолбца, СтрокаСоответствияТипов.ФункцияОбработки);
				Если Не НастройкиПодключения.ТипизироватьXMLJSONКакСтроку
					ИЛИ (СтрокаСоответствияТипов.ФункцияОбработки <> "ОбработкаЗначенийБД_ПолучитьXML" И СтрокаСоответствияТипов.ФункцияОбработки <> "ОбработкаЗначенийБД_ПолучитьJSON")
					Тогда
					ОписаниеТипа = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		                
		КонтекстВыполнения.ВременнаяТаблица.Колонки.Добавить(ИмяСтолбца, ОписаниеТипа);
	КонецЦикла;
	
	// читаем набор записей (результат запроса)
	Пока НЕ КонтекстВыполнения.НаборЗаписей.EOF Цикл        
			
		// Заполнение строки таблицы результата
		НоваяСтрока = КонтекстВыполнения.ВременнаяТаблица.Добавить();                
		Для НомерСтолбца = 0 По КонтекстВыполнения.НаборЗаписей.Fields.Count - 1 Цикл
			ЗначениеЯчейки = СокрЛП(КонтекстВыполнения.НаборЗаписей.Fields(НомерСтолбца).Value);
			
			// приведение к типу
			ФункцияОбработки = СоответствиеТипов.Получить(КонтекстВыполнения.НаборЗаписей.Fields(НомерСтолбца).Name); 
			Если КонтекстВыполнения.Свойство("Типизировать") И КонтекстВыполнения.Типизировать = Истина
				И КонтекстВыполнения.ВременнаяТаблица.Колонки.Получить(НомерСтолбца).ТипЗначения <> Неопределено
				И ЗначениеЗаполнено(ФункцияОбработки)
				Тогда
				Если Не НастройкиПодключения.ТипизироватьXMLJSONКакСтроку
					ИЛИ (ФункцияОбработки <> "ОбработкаЗначенийБД_ПолучитьXML" И ФункцияОбработки <> "ОбработкаЗначенийБД_ПолучитьJSON")
					Тогда
					ЗначениеЯчейки = Вычислить(ФункцияОбработки + "(ЗначениеЯчейки, КонтекстВыполнения.ВременнаяТаблица.Колонки.Получить(НомерСтолбца).ТипЗначения)");
				КонецЕсли;
			КонецЕсли;
			                                
			НоваяСтрока.Установить(НомерСтолбца, ЗначениеЯчейки);                
		КонецЦикла;                
	
		КонтекстВыполнения.НаборЗаписей.MoveNext();
	КонецЦикла;
	
	// если подключение не открывали - не будем закрывать
	Если ЗакрытьПодключение Тогда
		КонтекстВыполнения.ОбъектПодключения.close();
	КонецЕсли;
	//
	Возврат КонтекстВыполнения.ВременнаяТаблица;
КонецФункции

#Область Методы_обработки_типов

Функция ПолучитьТаблицуТиповКолонокБД(НастройкиПодключения, ОбъектПодключения, ИмяТаблицы = Неопределено)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("table_name", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("column_name", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("udt_name", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("data_type", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Тип1С", Новый ОписаниеТипов("ОписаниеТипов"));
	
	ТекстЗапроса = "SELECT table_name, column_name, udt_name, data_type FROM information_schema.columns WHERE table_catalog = '" + НастройкиПодключения.ИмяБазыДанных + "' and table_schema = 'public'";
	Если ИмяТаблицы <> Неопределено Тогда
	 ТекстЗапроса = ТекстЗапроса + " and table_name = '" + ИмяТаблицы + "'";
	КонецЕсли;
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("ОбъектПодключения", ОбъектПодключения);
	КонтекстВыполнения.Вставить("ТекстЗапроса", ТекстЗапроса);
	КонтекстВыполнения.Вставить("Типизировать", Ложь);
	ТаблицаТиповКолонок = ПолучитьТаблицуДанныхРезультатаЗапросаODBC(НастройкиПодключения, КонтекстВыполнения);
	
	ТаблицаКодовТипов = ПолучитьТаблицуКодовТипов("ИмяТипаPostgre");
	
	Для Каждого СтрокаРезультата Из ТаблицаТиповКолонок Цикл
		НоваяСтрокаРезультата = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультата, СтрокаРезультата);
		СтрокаКодаТипа = ТаблицаКодовТипов.Найти(СтрокаРезультата.udt_name, "ИмяТипаPostgre");
		Если СтрокаКодаТипа <> Неопределено Тогда
			НоваяСтрокаРезультата.Тип1С = СтрокаКодаТипа.Тип1С; 
		КонецЕсли;
	КонецЦикла;
	
	Результат.Индексы.Добавить("table_name, column_name");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьТип1СПоКодуADO(КодТипаПараметра)
	НайденнаяСтрока = ПолучитьТаблицуКодовТипов("КодТипа").Найти(КодТипаПараметра, "КодТипа");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Новый ОписаниеТипов("Строка");
	КонецЕсли;
	Возврат НайденнаяСтрока.Тип1С;
КонецФункции

Функция ПолучитьТипПараметраADO(ЗначениеПараметра)
	Результат = Неопределено;
	
	ТипЗнчПараметра = ТипЗнч(ЗначениеПараметра);
	ТаблицаОписанияТипов = ПолучитьТаблицуКодовТипов();
	ТаблицаОписанияТипов.Сортировать("КодТипа Возр");
	Для Каждого СтрокаОписанияТипа Из ТаблицаОписанияТипов Цикл
		Если СтрокаОписанияТипа.Тип1С = ТипЗнчПараметра Тогда
			Результат = СтрокаОписанияТипа.КодТипа;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат = Неопределено Тогда
		Если ТипЗнчПараметра = Тип("Число") Тогда
			//Результат = 139;	// число adVarNumeric / Indicates a numeric value
			Результат = 20;	// число adBigInt / Indicates an eight-byte signed integer (DBTYPE_I8)
		ИначеЕсли ТипЗнчПараметра = Тип("Дата") Тогда
			Результат = 134;	// число adDBTime / Indicates a time value (hhmmss) (DBTYPE_DBTIME)
		ИначеЕсли ТипЗнчПараметра = Тип("Булево") Тогда
			Результат = 11;	// число adBoolean / Indicates a Boolean value (DBTYPE_BOOL)
		Иначе
			Результат = 200;	// строка adVarChar / Indicates a string value
		КонецЕсли;
	КонецЕсли;
	//
	Возврат Результат;
КонецФункции

Функция ПолучитьТаблицуКодовТипов(Индекс = Неопределено)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодТипа", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ИмяТипаADO", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяТипаPostgre", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КомментарийADO", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Тип1С", Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("ФункцияОбработки", Новый ОписаниеТипов("Строка"));
	
	// Строка
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 0;
	НоваяСтрока.ИмяТипаADO = "AnsiString";
	НоваяСтрока.ИмяТипаPostgre = "varchar";
	НоваяСтрока.КомментарийADO = "Поток переменной длины из символов, не принадлежащих кодировке Юникод. В нем может быть от 1 до 8000 символов.";;
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 16;
	НоваяСтрока.ИмяТипаADO = "String";
	НоваяСтрока.ИмяТипаPostgre = "text";
	НоваяСтрока.КомментарийADO = "Тип, представляющий символьные строки в Юникоде.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 22;
	НоваяСтрока.ИмяТипаADO = "AnsiStringFixedLength";
	НоваяСтрока.ИмяТипаPostgre = "char";
	НоваяСтрока.КомментарийADO = "Поток фиксированной длины из символов, не принадлежащих кодировке Юникод.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 23;
	НоваяСтрока.ИмяТипаADO = "StringFixedLength";
	НоваяСтрока.ИмяТипаPostgre = "text";
	НоваяСтрока.КомментарийADO = "Строка фиксированной длины из символов Юникода.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 129;
	НоваяСтрока.ИмяТипаADO = "Char";
	НоваяСтрока.ИмяТипаPostgre = "char";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 200;
	НоваяСтрока.ИмяТипаADO = "VarChar";
	НоваяСтрока.ИмяТипаPostgre = "varchar";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 201;
	НоваяСтрока.ИмяТипаADO = "LongVarChar";
	НоваяСтрока.ИмяТипаPostgre = "varchar";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 202;
	НоваяСтрока.ИмяТипаADO = "VarWChar";
	НоваяСтрока.ИмяТипаPostgre = "varchar";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 203;
	НоваяСтрока.ИмяТипаADO = "LongVarWChar";
	НоваяСтрока.ИмяТипаPostgre = "varchar";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "";
	
	// ДвоичныеДанные
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 1;
	НоваяСтрока.ИмяТипаADO = "Binary";
	НоваяСтрока.ИмяТипаPostgre = "bytea";
	НоваяСтрока.КомментарийADO = "Поток переменной длины из двоичных данных, имеющий длину от 1 до 8000 байт.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("ДвоичныеДанные");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДвоичныеДанные";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 128;
	НоваяСтрока.ИмяТипаADO = "Binary";
	НоваяСтрока.ИмяТипаPostgre = "bytea";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("ДвоичныеДанные");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДвоичныеДанные";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 204;
	НоваяСтрока.ИмяТипаADO = "VarBinary";
	НоваяСтрока.ИмяТипаPostgre = "bytea";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("ДвоичныеДанные");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДвоичныеДанные";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 205;
	НоваяСтрока.ИмяТипаADO = "LongVarBinary";
	НоваяСтрока.ИмяТипаPostgre = "bytea";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("ДвоичныеДанные");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДвоичныеДанные";
	
	// Булево
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 3;
	НоваяСтрока.ИмяТипаADO = "Boolean";
	НоваяСтрока.ИмяТипаPostgre = "bool";
	НоваяСтрока.КомментарийADO = "Простой тип для представления логических значений true и false.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Булево");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьБулево";
	
	// Число
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 2;
	НоваяСтрока.ИмяТипаADO = "Byte";
	НоваяСтрока.ИмяТипаPostgre = "int2";	// на самом деле smallint это 2 байта, но другого типа в PostgreSQL не нашел
	НоваяСтрока.КомментарийADO = "8-разрядное целое число без знака, которое может принимать значения от 0 до 255.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 4;
	НоваяСтрока.ИмяТипаADO = "Currency";
	НоваяСтрока.ИмяТипаPostgre = "money";
	НоваяСтрока.КомментарийADO = "Значение типа currency, лежащее в диапазоне от -2 63 (или -922 337 203 685 477,5808) до 2 63 -1 (или +922 337 203 685 477,5807) и имеющее точность до одной десятитысячной денежной единицы.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 7;
	НоваяСтрока.ИмяТипаADO = "Decimal";
	НоваяСтрока.ИмяТипаPostgre = "float4";
	НоваяСтрока.КомментарийADO = "Простой тип для представления значений в диапазоне от 1,0 x 10 -28 до приблизительно 7,9 x 10 28 с 28–29 значимыми цифрами.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 8;
	НоваяСтрока.ИмяТипаADO = "Double";
	НоваяСтрока.ИмяТипаPostgre = "float8";
	НоваяСтрока.КомментарийADO = "Тип для представления значений с плавающей запятой в диапазоне от 5,0 x 10 -324 до приблизительно 1,7 x 10 308 с точностью до 15–16 знаков.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 10;
	НоваяСтрока.ИмяТипаADO = "Int16";
	НоваяСтрока.ИмяТипаPostgre = "int2";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 16-разрядных целых чисел со знаком в диапазоне от -32768 до 32767.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 11;
	НоваяСтрока.ИмяТипаADO = "Int32";
	НоваяСтрока.ИмяТипаPostgre = "int4";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 32-разрядных целых чисел со знаком в диапазоне от -2147483648 до 2147483647.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 12;
	НоваяСтрока.ИмяТипаADO = "Int64";
	НоваяСтрока.ИмяТипаPostgre = "int8";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 64-разрядных целых чисел со знаком в диапазоне от -9223372036854775808 до 9223372036854775807.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 14;
	НоваяСтрока.ИмяТипаADO = "SByte";
	НоваяСтрока.ИмяТипаPostgre = "int2";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 8-разрядных целых чисел со знаком в диапазоне от -128 до 127.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 15;
	НоваяСтрока.ИмяТипаADO = "Single";
	НоваяСтрока.ИмяТипаPostgre = "float4";
	НоваяСтрока.КомментарийADO = "Тип для представления значений с плавающей запятой в диапазоне от 1,5 x 10 -45 до приблизительно 3,4 x 10 38 с точностью до 7знаков.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 18;
	НоваяСтрока.ИмяТипаADO = "UInt16";
	НоваяСтрока.ИмяТипаPostgre = "int2";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 16-разрядных целых чисел без знака в диапазоне от 0 до 65535.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 19;
	НоваяСтрока.ИмяТипаADO = "UInt32";
	НоваяСтрока.ИмяТипаPostgre = "int4";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 32-разрядных целых чисел со значениями от 0 до 4294967295.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 20;
	НоваяСтрока.ИмяТипаADO = "UInt64";
	НоваяСтрока.ИмяТипаPostgre = "int8";
	НоваяСтрока.КомментарийADO = "Целочисленный тип для представления 64-разрядных целых чисел со значениями от 0 до 18446744073709551615.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 21;
	НоваяСтрока.ИмяТипаADO = "VarNumeric";
	НоваяСтрока.ИмяТипаPostgre = "numeric";
	НоваяСтрока.КомментарийADO = "Числовое значение переменной длины.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 131;
	НоваяСтрока.ИмяТипаADO = "Numeric";
	НоваяСтрока.ИмяТипаPostgre = "numeric";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Число");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьЧисло";
	
	// Дата
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 5;
	НоваяСтрока.ИмяТипаADO = "Date";
	НоваяСтрока.ИмяТипаPostgre = "date";
	НоваяСтрока.КомментарийADO = "Тип, представляющий значение даты.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 6;
	НоваяСтрока.ИмяТипаADO = "DateTime";
	НоваяСтрока.ИмяТипаPostgre = "timestamp";
	НоваяСтрока.КомментарийADO = "Тип, представляющий значение даты и времени.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 17;
	НоваяСтрока.ИмяТипаADO = "Time";
	НоваяСтрока.ИмяТипаPostgre = "time";
	НоваяСтрока.КомментарийADO = "Тип, представляющий значение DateTime SQL Server. Если нужно использовать значение time SQL Server, необходимо воспользоваться Time.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 17;
	НоваяСтрока.ИмяТипаADO = "Time";
	НоваяСтрока.ИмяТипаPostgre = "timetz";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 26;
	НоваяСтрока.ИмяТипаADO = "DateTime2";
	НоваяСтрока.ИмяТипаPostgre = "timestamp";
	НоваяСтрока.КомментарийADO = "Данные даты и времени. Значение даты может находиться в диапазоне от 1 января 1 г. н. э. до 31 декабря 9999 года н. э. Значение времени может находиться в диапазоне от 00:00:00 до 23:59:59,9999999 с точностью до 100 наносекунд.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 27;
	НоваяСтрока.ИмяТипаADO = "DateTimeOffset";
	НоваяСтрока.ИмяТипаPostgre = "timestamptz";
	НоваяСтрока.КомментарийADO = "Данные даты и времени с учетом часового пояса. Значение даты может находиться в диапазоне от 1 января 1 г. н. э. до 31 декабря 9999 года н. э. Значение времени может находиться в диапазоне от 00:00:00 до 23:59:59,9999999 с точностью до 100 наносекунд. Часовые пояса могут находиться в диапазоне от -14:00 до +14:00.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 135;
	НоваяСтрока.ИмяТипаADO = "DBTimeStamp";
	НоваяСтрока.ИмяТипаPostgre = "timestamp";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьДатуИВремя";
	
	// УникальныйИдентификатор
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 9;
	НоваяСтрока.ИмяТипаADO = "Guid";
	НоваяСтрока.ИмяТипаPostgre = "uuid";
	НоваяСтрока.КомментарийADO = "Глобальный уникальный идентификатор (GUID).";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("УникальныйИдентификатор");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьУникальныйИдентификатор";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 72;
	НоваяСтрока.ИмяТипаADO = "Guid";
	НоваяСтрока.ИмяТипаPostgre = "uuid";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("УникальныйИдентификатор");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьУникальныйИдентификатор";

	// вероятно двоичное представление XML / JSON
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 25;
	НоваяСтрока.ИмяТипаADO = "Xml";
	НоваяСтрока.ИмяТипаPostgre = "xml";
	НоваяСтрока.КомментарийADO = "Проанализированное представление фрагмента или документа XML.";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьXML";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 0;
	НоваяСтрока.ИмяТипаADO = "";
	НоваяСтрока.ИмяТипаPostgre = "json";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьJSON";
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 0;
	НоваяСтрока.ИмяТипаADO = "";
	НоваяСтрока.ИмяТипаPostgre = "jsonb";
	НоваяСтрока.КомментарийADO = "";
	НоваяСтрока.Тип1С = Новый ОписаниеТипов("Строка");
	НоваяСтрока.ФункцияОбработки = "ОбработкаЗначенийБД_ПолучитьJSON";
	
	// Неопределено
	
	НоваяСтрока = Результат.Добавить();
	НоваяСтрока.КодТипа = 13;
	НоваяСтрока.ИмяТипаADO = "Object";
	НоваяСтрока.ИмяТипаPostgre = "";
	НоваяСтрока.КомментарийADO = "Общий тип для представления всех значений и ссылок, которые не могут быть представлены ни одним другим значением DbType.";
	НоваяСтрока.Тип1С = Неопределено;
	НоваяСтрока.ФункцияОбработки = "";
	
	Если Индекс = Неопределено Тогда
		Результат.Индексы.Добавить("КодТипа");
		Результат.Индексы.Добавить("ИмяТипаPostgre");
	Иначе
		Результат.Индексы.Добавить(Индекс);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#Область Методы_приведения_значений_БД_к_типу_1С
// методы должны иметь 3 параметра (первый обязательный): Значение, ОписаниеТипа и УстановитьЗначениеПоУмолчанию

Функция ОбработкаЗначенийБД_ПолучитьДвоичныеДанные(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Ложь)
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Возврат Значение;
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		ОбъектЗаписи = Новый ЗаписьТекста;
		ОбъектЗаписи.Открыть(ИмяВременногоФайла);
		ОбъектЗаписи.Записать(Значение);
		ОбъектЗаписи.Закрыть();
		
		Результат = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция ОбработкаЗначенийБД_ПолучитьБулево(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Истина)
	Результат = Неопределено;
	
	Если ОписаниеТипа <> Неопределено Тогда
		Попытка
			Результат = ОписаниеТипа.ПривестиЗначение(Значение);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("Булево") Тогда
			Результат = Значение;
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			Результат = (Значение <> 0);
		Иначе
			ПредставлениеЗначения = ПолучитьЗначениеСтрокой(Значение, Истина, Истина, Истина);
			Если ПредставлениеЗначения = "истина"
				ИЛИ ПредставлениеЗначения = "true"
				ИЛИ ПредставлениеЗначения = "1"
				Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено И УстановитьЗначениеПоУмолчанию Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбработкаЗначенийБД_ПолучитьЧисло(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Истина)
	Результат = Неопределено;

	Если ОписаниеТипа <> Неопределено Тогда
		Попытка
			Результат = ОписаниеТипа.ПривестиЗначение(Значение);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Результат = Значение;
		Иначе
			ПредставлениеЗначения = ПолучитьЗначениеСтрокой(Значение, Истина, Истина, Истина, "1234567890");
			Попытка
				Результат = Число(ПредставлениеЗначения);
			Исключение
				// ничего не делаем
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено И УстановитьЗначениеПоУмолчанию Тогда
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбработкаЗначенийБД_ПолучитьДатуИВремя(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Истина)
	Результат = Неопределено;

	Если ОписаниеТипа <> Неопределено Тогда
		Попытка
			Результат = ОписаниеТипа.ПривестиЗначение(Значение);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ПредставлениеЗначения = ПолучитьЗначениеСтрокой(Значение, Истина, Истина, Истина);
		Попытка
			Результат = Дата(ПредставлениеЗначения);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Дата = ПолучитьДатуПоФормату(Значение);
	КонецЕсли;
	
	Если Результат = Неопределено И УстановитьЗначениеПоУмолчанию Тогда
		Результат = Дата(1, 1, 1);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ОбработкаЗначенийБД_ПолучитьУникальныйИдентификатор(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Ложь)
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Результат = Значение;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ПредставлениеЗначения = ПолучитьЗначениеСтрокой(Значение);
		Попытка
			Результат = Новый УникальныйИдентификатор(ПредставлениеЗначения);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено И ОписаниеТипа <> Неопределено Тогда
		Попытка
			Результат = ОписаниеТипа.ПривестиЗначение(Значение);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбработкаЗначенийБД_ПолучитьXML(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Ложь)
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Попытка
			ОбъектЧтения = Новый ЧтениеFastInfoset();
			ОбъектЧтения.УстановитьДвоичныеДанные(Значение);
			Результат = ОбъектЧтения.Прочитать();
			ОбъектЧтения.Закрыть();
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено И ТипЗнч(Значение) = Тип("Строка") Тогда
		Попытка
			ОбъектЧтения = Новый ЧтениеXML;
			ОбъектЧтения.УстановитьСтроку(Значение);
			Результат = ПрочитатьXML(ОбъектЧтения);
			ОбъектЧтения.Закрыть();
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено И ОписаниеТипа <> Неопределено Тогда
		Попытка
			Результат = ОписаниеТипа.ПривестиЗначение(Значение);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбработкаЗначенийБД_ПолучитьJSON(Значение, ОписаниеТипа = Неопределено, УстановитьЗначениеПоУмолчанию = Ложь)
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Попытка
			ОбъектЧтения = Новый ЧтениеFastInfoset();
			ОбъектЧтения.УстановитьДвоичныеДанные(Значение);
			Результат = ОбъектЧтения.Прочитать();
			ОбъектЧтения.Закрыть();
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено И ТипЗнч(Значение) = Тип("Строка") Тогда
		Попытка
			ОбъектЧтения = Новый ЧтениеJSON;
			ОбъектЧтения.УстановитьСтроку(Значение);
			Результат = ПрочитатьJSON(ОбъектЧтения);
			ОбъектЧтения.Закрыть();
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Если Результат = Неопределено И ОписаниеТипа <> Неопределено Тогда
		Попытка
			Результат = ОписаниеТипа.ПривестиЗначение(Значение);
		Исключение
			// ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьЗначениеСтрокой(ИсходнаяСтрока, СокрЛП = Истина, УдалитьНепечатаемыеСимволы = Истина, НРег = Истина, СтрокаДопустимыхСимволов = Неопределено, СтрокаНедопустимыхСимволов = Неопределено)
	Результат = Строка(ИсходнаяСтрока);
	
	Если СокрЛП Тогда
		Результат = СокрЛП(Результат);
	КонецЕсли;
	
	Если УдалитьНепечатаемыеСимволы Тогда
		Результат = СтрЗаменить(Результат, Символы.ВК, "");
		Результат = СтрЗаменить(Результат, Символы.ВТаб, "");
		Результат = СтрЗаменить(Результат, Символы.НПП, "");
		Результат = СтрЗаменить(Результат, Символы.ПС, "");
		Результат = СтрЗаменить(Результат, Символы.ПФ, "");
		Результат = СтрЗаменить(Результат, Символы.Таб, "");
	КонецЕсли;
	
	Если НРег Тогда
		Результат = НРег(Результат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДопустимыхСимволов) Тогда
		СтрокаДопустимыхСимволов_ = СтрокаДопустимыхСимволов;
		
		Если НРег Тогда
			СтрокаДопустимыхСимволов_ = НРег(СтрокаДопустимыхСимволов_);
		КонецЕсли;
		
		ТекущаяСтрока = Результат;
		Результат = "";
		ИндексСимвола = 1;
		Пока ИндексСимвола <= СтрДлина(ТекущаяСтрока) Цикл
			ТекущийСимвол = Сред(ТекущаяСтрока, ИндексСимвола, 1);
			Если СтрНайти(СтрокаДопустимыхСимволов_, ТекущийСимвол) > 0 Тогда
				Результат = Результат + ТекущийСимвол;
			КонецЕсли;
			ИндексСимвола = ИндексСимвола + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаНедопустимыхСимволов) Тогда
		СтрокаНедопустимыхСимволов_ = СтрокаНедопустимыхСимволов;
		
		Если НРег Тогда
			СтрокаНедопустимыхСимволов_ = НРег(СтрокаНедопустимыхСимволов_);
		КонецЕсли;
		
		ТекущаяСтрока = Результат;
		Результат = "";
		ИндексСимвола = 1;
		Пока ИндексСимвола <= СтрДлина(ТекущаяСтрока) Цикл
			ТекущийСимвол = Сред(ТекущаяСтрока, ИндексСимвола, 1);
			Если СтрНайти(СтрокаНедопустимыхСимволов_, ТекущийСимвол) = 0 Тогда
				Результат = Результат + ТекущийСимвол;
			КонецЕсли;
			ИндексСимвола = ИндексСимвола + 1;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Функция ПолучитьДатуПоФормату(Значение)
	Результат = Неопределено;
	ПредставлениеЗначения = ПолучитьЗначениеСтрокой(Значение, Истина, Истина, Истина);
	
	// получим значение по форматам 
	// |yyyy-mm-dd hh:mm:ss+-t| = 6 совпадений
	// |yyyy-mm-dd hh:mm:ss| = 5 совпадений
	// |yyyy-mm-dd| = 2 совпадения
	Если Результат = Неопределено Тогда
		Формат1 = Истина;
		Если СтрДлина(ПредставлениеЗначения) < 10
			ИЛИ Сред(ПредставлениеЗначения, 5, 1) <> "-"
			ИЛИ Сред(ПредставлениеЗначения, 8, 1) <> "-" Тогда
			Формат1 = Ложь;
		КонецЕсли;
		
		Формат2 = Истина;
		Если Не Формат1
			ИЛИ СтрДлина(ПредставлениеЗначения) < 19
			ИЛИ Сред(ПредставлениеЗначения, 11, 1) <> " "
			ИЛИ Сред(ПредставлениеЗначения, 14, 1) <> ":"
			ИЛИ Сред(ПредставлениеЗначения, 17, 1) <> ":" Тогда
			Формат2 = Ложь;
		КонецЕсли;
		
		Формат3 = Истина;
		Если Не Формат2
			ИЛИ СтрДлина(ПредставлениеЗначения) < 21
			ИЛИ СтрНайти("+-", Сред(ПредставлениеЗначения, 20, 1)) Тогда
			Формат3 = Ложь;
		КонецЕсли;
		
		Если Формат1 Тогда
			Год = Сред(ПредставлениеЗначения, 1, 4);
			Месяц = Сред(ПредставлениеЗначения, 6, 2);
			Дата = Сред(ПредставлениеЗначения, 9, 2);
		КонецЕсли;
		
		Если Формат2 Тогда
			Час = Сред(ПредставлениеЗначения, 12, 2);
			Минута = Сред(ПредставлениеЗначения, 15, 2);
			Секунда = Сред(ПредставлениеЗначения, 18, 2);
		КонецЕсли;
		
		Если Формат3 Тогда
			ЧасовойПояс = Число(ПолучитьЗначениеСтрокой(Прав(ПредставлениеЗначения, СтрДлина(ПредставлениеЗначения) - 20), Истина, Истина, Истина, "123456789"));
			Если Сред(ПредставлениеЗначения, 20, 1) = "+" Тогда
				Час = Час + (1 * ЧасовойПояс);
			Иначе
				Час = Час + (-1 * ЧасовойПояс);
			КонецЕсли;
		КонецЕсли;
		
		Если Формат2 Тогда
			Попытка
				Результат = Дата(Год, Месяц, Дата, Час, Минута, Секунда);
			Исключение
				// ничего не делаем
			КонецПопытки;
		ИначеЕсли Формат1 Тогда
			Попытка
				Результат = Дата(Год, Месяц, Дата);
			Исключение
				// ничего не делаем
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
